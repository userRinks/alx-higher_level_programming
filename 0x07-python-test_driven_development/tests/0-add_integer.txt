# Test cases for add_integer function

# Importing the add_integer function
>>> add_integer = __import__('0-add_integer').add_integer

# Test case 1
>>> add_integer(1, 2)
3

# Test case 2
>>> add_integer(1.5, 2)
3

# Test case 3
>>> add_integer(1, 2.5)
3

# Test case 4
>>> add_integer(1.5, 2.5)
3

# Test case 5: Handling TypeError when the first parameter is a string
>>> add_integer("1", 2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 3, in add_integer
TypeError: a must be an integer


# Test case 6: Handling TypeError when the second parameter is a string
>>> add_integer(1, "2")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 5, in add_integer
TypeError: b must be an integer


# Test case 7: Handling TypeError when both parameters are strings
>>> add_integer("3", "5")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 3, in add_integer
TypeError: a must be an integer

# Test case 8: Handling OverflowError when the first parameter is float("inf") and the second is an integer
>>> a = float("inf")
>>> b = 10
>>> add_integer(a, b)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 8, in add_integer
OverflowError: cannot convert float infinity to integer
