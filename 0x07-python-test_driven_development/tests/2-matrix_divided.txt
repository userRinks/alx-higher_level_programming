>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Test Case 1: Basic division with integers (2)
>>> matrix = [
...     [10, 20, 30],
...     [40, 50, 60]
... ]
>>> matrix_divided(matrix, 2)
[[5.0, 10.0, 15.0], [20.0, 25.0, 30.0]]

# Test Case 2: Division resulting in recurring decimals (9)
>>> matrix = [
...     [1, 2, 3],
...     [36, 45, 54]
... ]
>>> matrix_divided(matrix, 9)
[[0.11, 0.22, 0.33], [4.0, 5.0, 6.0]]

# Test Case 3: Print(matrix) leaves it unchanged
>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6]
... ]
>>> print(matrix)
[[1, 2, 3], [4, 5, 6]]

# Test Case 3.5: But using matrix_divided results in a decimal place
>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6]
... ]
>>> matrix_divided(matrix, 1)
[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

# Test Case 4: Handling floating point numbers
>>> matrix = [
...     [1.5, 2.5, 3.5],
...     [4.5, 5.5, 6.5]
... ]
>>> matrix_divided(matrix, 1.5)
[[1.0, 1.67, 2.33], [3.0, 3.67, 4.33]]

# Test Case 5: Combining ints and floats
>>> matrix = [
...     [1, 2.5, 3],
...     [4.2, 5, 6]
... ]
>>> matrix_divided(matrix, 2)
[[0.5, 1.25, 1.5], [2.1, 2.5, 3.0]]

# Test Case 6: Matrix must be a list
>>> try:
...     matrix_divided("string", 2)
... except TypeError as e:
...     str(e)
...
'matrix must be a matrix (list of lists) of integers/floats'

# Test Case 7: Matrix must contain either ints, floats, or both
>>> matrix = [
...     [1, 2, 3],
...     ["a", "b", "c"]
... ]
>>> try:
...     matrix_divided(matrix, 2)
... except TypeError as e:
...     str(e)
...
'matrix must be a matrix (list of lists) of integers/floats'

# Test Case 8: List must not be empty else TypeError
>>> try:
...     matrix_divided([], 2)
... except TypeError as e:
...     str(e)
...
'matrix must be a matrix (list of lists) of integers/floats'

# Test Case 9: Empty list of lists will be passed
>>> matrix = [[]]
>>> matrix_divided(matrix, 2)
[[]]

# Test Case 10: TypeError raised if matrix is not a list of lists
>>> try:
...     matrix_divided("string", 2)
... except TypeError as e:
...     str(e)
...
'matrix must be a matrix (list of lists) of integers/floats'

# Test Case 11: TypeError raised if any elements in matrix are neither ints nor floats
>>> matrix = [
...     [1, 2, 3],
...     [4, "five", 6]
... ]
>>> try:
...     matrix_divided(matrix, 2)
... except TypeError as e:
...     str(e)
...
'matrix must be a matrix (list of lists) of integers/floats'

# Test Case 12: All rows in matrix must be the same size
>>> matrix = [
...     [1, 2, 3],
...     [4, 5]
... ]
>>> try:
...     matrix_divided(matrix, 2)
... except TypeError as e:
...     str(e)
...
'Each row of the matrix must have the same size'

# Test Case 13: Parameter div must be either an int or float
>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6]
... ]
>>> try:
...     matrix_divided(matrix, "string")
... except TypeError as e:
...     str(e)
...
'div must be a number'

# Test Case 14: div must also be non-zero
>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6]
... ]
>>> try:
...     matrix_divided(matrix, 0)
... except ZeroDivisionError as e:
...     str(e)
...
'division by zero'
